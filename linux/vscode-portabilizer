#!/bin/bash

# vscode-portabilizer - Tool to create and upgrade VS Code portable installations on Linux
# Based on: https://code.visualstudio.com/docs/editor/portable

set -euo pipefail

VERSION="1.0.0"
VSCODE_DOWNLOAD_URL="https://code.visualstudio.com/sha/download?build=stable&os=linux-x64"
USER_DATA_DIR="$HOME/.config/Code"
EXTENSIONS_DIR="$HOME/.vscode/extensions"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show usage information
show_usage() {
    cat << EOF
vscode-portabilizer v${VERSION}
Tool to create and upgrade VS Code portable installations on Linux

Usage:
    $0 create [--no-migrate] <destination_folder>  - Create a new portable VS Code installation
    $0 upgrade <portable_folder>                    - Upgrade an existing portable VS Code installation
    $0 --help                                       - Show this help message

Examples:
    $0 create /opt/vscode-portable                  # Create with migration (if system installation exists)
    $0 create --no-migrate /opt/vscode-portable     # Create without migration (fresh installation)
    $0 upgrade /opt/vscode-portable

Requirements:
    - curl or wget for downloading
    - tar for extracting
    - sudo access for setting sandbox permissions

Notes:
    - The create command migrates your current VS Code configuration by default if found
    - Use --no-migrate to skip migration and create a fresh installation
    - If no system VS Code installation is found, a fresh installation is created automatically
    - The upgrade command preserves your data folder while updating VS Code
EOF
}

# Check if required tools are available
check_dependencies() {
    local missing_deps=()
    
    if ! command -v tar &> /dev/null; then
        missing_deps+=("tar")
    fi
    
    if ! command -v curl &> /dev/null && ! command -v wget &> /dev/null; then
        missing_deps+=("curl or wget")
    fi
    
    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing required dependencies: ${missing_deps[*]}"
        exit 1
    fi
}

# Download file using curl or wget
download_file() {
    local url="$1"
    local output="$2"
    
    print_info "Downloading VS Code from: $url"
    
    if command -v curl &> /dev/null; then
        curl -L -o "$output" "$url"
    elif command -v wget &> /dev/null; then
        wget -O "$output" "$url"
    else
        print_error "Neither curl nor wget is available"
        exit 1
    fi
}

# Set sandbox permissions for Linux
set_sandbox_permissions() {
    local vscode_path="$1"
    local chrome_sandbox="$vscode_path/chrome-sandbox"
    
    if [ -f "$chrome_sandbox" ]; then
        print_info "Setting sandbox permissions for chrome-sandbox"
        if sudo chown root "$chrome_sandbox" && sudo chmod 4755 "$chrome_sandbox"; then
            print_success "Sandbox permissions set successfully"
        else
            print_warning "Failed to set sandbox permissions. VS Code might not work properly."
            print_warning "You may need to run: sudo chown root '$chrome_sandbox' && sudo chmod 4755 '$chrome_sandbox'"
        fi
    else
        print_warning "chrome-sandbox not found at: $chrome_sandbox"
    fi
}

# Extract VS Code archive
extract_vscode() {
    local archive="$1"
    local destination="$2"
    
    print_info "Extracting VS Code to: $destination"
    tar -xzf "$archive" -C "$destination" --strip-components=1
}

# Copy user data and extensions to portable data folder
migrate_user_data() {
    local data_dir="$1"
    
    print_info "Migrating user data and extensions..."
    
    # Create data directory structure
    mkdir -p "$data_dir"
    
    # Copy user data
    if [ -d "$USER_DATA_DIR" ]; then
        print_info "Copying user data from: $USER_DATA_DIR"
        cp -r "$USER_DATA_DIR" "$data_dir/user-data"
    else
        print_warning "User data directory not found: $USER_DATA_DIR"
        print_info "Creating empty user-data directory"
        mkdir -p "$data_dir/user-data"
    fi
    
    # Copy extensions
    if [ -d "$EXTENSIONS_DIR" ]; then
        print_info "Copying extensions from: $EXTENSIONS_DIR"
        cp -r "$EXTENSIONS_DIR" "$data_dir/extensions"
    else
        print_warning "Extensions directory not found: $EXTENSIONS_DIR"
        print_info "Creating empty extensions directory"
        mkdir -p "$data_dir/extensions"
    fi

    # Create tmp directory for portable tmp
    mkdir -p "$data_dir/tmp"
}

# Create empty data directories for fresh portable installation
create_empty_data() {
    local data_dir="$1"
    
    print_info "Creating fresh portable data structure..."
    
    # Create data directory structure
    mkdir -p "$data_dir"
    
    # Create empty user-data directory
    print_info "Creating empty user-data directory"
    mkdir -p "$data_dir/user-data"
    
    # Create empty extensions directory
    print_info "Creating empty extensions directory"
    mkdir -p "$data_dir/extensions"
    
    # Create tmp directory for portable tmp
    mkdir -p "$data_dir/tmp"
}

# Check if VS Code system installation exists
check_system_installation() {
    local has_data=false
    local has_extensions=false
    
    if [ -d "$USER_DATA_DIR" ] && [ -n "$(ls -A "$USER_DATA_DIR" 2>/dev/null)" ]; then
        has_data=true
    fi
    
    if [ -d "$EXTENSIONS_DIR" ] && [ -n "$(ls -A "$EXTENSIONS_DIR" 2>/dev/null)" ]; then
        has_extensions=true
    fi
    
    if [ "$has_data" = true ] || [ "$has_extensions" = true ]; then
        return 0  # System installation found
    else
        return 1  # No system installation found
    fi
}

# Create a new portable VS Code installation
create_portable() {
    local no_migrate=false
    local destination=""
    
    # Parse arguments
    while [ $# -gt 0 ]; do
        case "$1" in
            --no-migrate)
                no_migrate=true
                shift
                ;;
            *)
                if [ -z "$destination" ]; then
                    destination="$1"
                else
                    print_error "Too many arguments"
                    show_usage
                    exit 1
                fi
                shift
                ;;
        esac
    done
    
    if [ -z "$destination" ]; then
        print_error "Destination folder not specified"
        show_usage
        exit 1
    fi
    
    # Create destination directory
    if [ -e "$destination" ]; then
        print_error "Destination already exists: $destination"
        exit 1
    fi
    
    mkdir -p "$destination"
    
    # Download VS Code
    local temp_archive=$(mktemp --suffix=.tar.gz)
    trap "rm -f '$temp_archive'" EXIT
    
    download_file "$VSCODE_DOWNLOAD_URL" "$temp_archive"
    
    # Extract VS Code
    extract_vscode "$temp_archive" "$destination"
    
    # Set sandbox permissions
    set_sandbox_permissions "$destination"
    
    # Create data directory
    local data_dir="$destination/data"
    
    # Decide whether to migrate or create fresh
    if [ "$no_migrate" = true ]; then
        print_info "Skipping migration due to --no-migrate flag"
        create_empty_data "$data_dir"
        print_success "Fresh portable VS Code created successfully at: $destination"
    else
        if check_system_installation; then
            print_info "System VS Code installation found, migrating data..."
            migrate_user_data "$data_dir"
            print_success "Portable VS Code created successfully at: $destination"
            print_info "Your existing settings and extensions have been migrated"
        else
            print_warning "No VS Code system installation found"
            print_info "Creating fresh portable installation..."
            create_empty_data "$data_dir"
            print_success "Fresh portable VS Code created successfully at: $destination"
            print_info "You can configure VS Code from scratch"
        fi
    fi
    
    print_info "You can now run VS Code with: $destination/code"
}

# Upgrade an existing portable VS Code installation
upgrade_portable() {
    local portable_folder="$1"
    
    if [ -z "$portable_folder" ]; then
        print_error "Portable folder not specified"
        show_usage
        exit 1
    fi
    
    if [ ! -d "$portable_folder" ]; then
        print_error "Portable folder does not exist: $portable_folder"
        exit 1
    fi
    
    if [ ! -d "$portable_folder/data" ]; then
        print_error "Not a valid portable VS Code installation (data folder not found): $portable_folder"
        exit 1
    fi
    
    # Backup data directory
    local backup_dir=$(mktemp -d)
    print_info "Backing up data directory to: $backup_dir"
    cp -r "$portable_folder/data" "$backup_dir/"
    
    # Download new VS Code version
    local temp_archive=$(mktemp --suffix=.tar.gz)
    trap "rm -f '$temp_archive'; rm -rf '$backup_dir'" EXIT
    
    download_file "$VSCODE_DOWNLOAD_URL" "$temp_archive"
    
    # Remove old VS Code files (but keep data)
    print_info "Removing old VS Code files..."
    find "$portable_folder" -mindepth 1 -maxdepth 1 ! -name 'data' -exec rm -rf {} +
    
    # Extract new VS Code
    extract_vscode "$temp_archive" "$portable_folder"
    
    # Restore data directory
    print_info "Restoring data directory..."
    rm -rf "$portable_folder/data"
    mv "$backup_dir/data" "$portable_folder/"
    
    # Set sandbox permissions
    set_sandbox_permissions "$portable_folder"
    
    print_success "Portable VS Code upgraded successfully at: $portable_folder"
    print_info "You can now run the updated VS Code with: $portable_folder/code"
}

# Main function
main() {
    check_dependencies
    
    case "${1:-}" in
        "create")
            shift  # Remove 'create' from arguments
            create_portable "$@"
            ;;
        "upgrade")
            upgrade_portable "$2"
            ;;
        "--help"|"-h"|"help")
            show_usage
            ;;
        "")
            print_error "No command specified"
            show_usage
            exit 1
            ;;
        *)
            print_error "Unknown command: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
